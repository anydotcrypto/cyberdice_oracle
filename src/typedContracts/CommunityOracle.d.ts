/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CommunityOracleInterface extends Interface {
  functions: {
    appointedOracle: TypedFunctionDescription<{ encode([]: [string]): string }>;

    getBeacon: TypedFunctionDescription<{ encode([]: []): string }>;

    minimumOracles: TypedFunctionDescription<{ encode([]: []): string }>;

    oracleSubmitted: TypedFunctionDescription<{ encode([]: [string]): string }>;

    proposalList: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    proposals: TypedFunctionDescription<{ encode([]: [string]): string }>;

    relayHub: TypedFunctionDescription<{ encode([]: []): string }>;

    submitBeacon: TypedFunctionDescription<{
      encode([_proposal]: [string]): string;
    }>;

    submitted: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Beacon: TypedEventDescription<{
      encodeTopics([bls, beacon]: [null, null]): string[];
    }>;
  };
}

export class CommunityOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CommunityOracle;
  attach(addressOrName: string): CommunityOracle;
  deployed(): Promise<CommunityOracle>;

  on(event: EventFilter | string, listener: Listener): CommunityOracle;
  once(event: EventFilter | string, listener: Listener): CommunityOracle;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CommunityOracle;
  removeAllListeners(eventName: EventFilter | string): CommunityOracle;
  removeListener(eventName: any, listener: Listener): CommunityOracle;

  interface: CommunityOracleInterface;

  functions: {
    appointedOracle(arg0: string): Promise<boolean>;

    getBeacon(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    minimumOracles(): Promise<BigNumber>;

    oracleSubmitted(arg0: string): Promise<boolean>;

    proposalList(arg0: BigNumberish): Promise<string>;

    proposals(arg0: string): Promise<BigNumber>;

    relayHub(): Promise<string>;

    submitBeacon(
      _proposal: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitted(): Promise<BigNumber>;
  };

  appointedOracle(arg0: string): Promise<boolean>;

  getBeacon(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  minimumOracles(): Promise<BigNumber>;

  oracleSubmitted(arg0: string): Promise<boolean>;

  proposalList(arg0: BigNumberish): Promise<string>;

  proposals(arg0: string): Promise<BigNumber>;

  relayHub(): Promise<string>;

  submitBeacon(
    _proposal: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitted(): Promise<BigNumber>;

  filters: {
    Beacon(bls: null, beacon: null): EventFilter;
  };

  estimate: {
    appointedOracle(arg0: string): Promise<BigNumber>;

    getBeacon(): Promise<BigNumber>;

    minimumOracles(): Promise<BigNumber>;

    oracleSubmitted(arg0: string): Promise<BigNumber>;

    proposalList(arg0: BigNumberish): Promise<BigNumber>;

    proposals(arg0: string): Promise<BigNumber>;

    relayHub(): Promise<BigNumber>;

    submitBeacon(_proposal: string): Promise<BigNumber>;

    submitted(): Promise<BigNumber>;
  };
}
